---
description: "Three.js and ECS system logic rules"
globs: src/systems/**/*.ts
alwaysApply: false
---

## Core Principles
- Pattern: `export const systemName = (world: World) => void`
- Each system handles one aspect of game logic
- Keep systems pure with no side effects
- Use delta time for frame-independent movement
- Query only relevant traits with `world.query()`
```typescript
world.query(Transform, Velocity).updateEach(([t, v]) => { t.position.add(v.vector); });
```

## Key Systems

### Transform & Movement
- Handle position/rotation updates with THREE.js math utilities
- Apply forces and velocities consistently
- Use delta for frame-independent movement: `position.x += velocity.x * delta;`

### Camera
- Use smooth interpolation and constraints
- Implement position damping: `position.lerp(target, damping)`
- Use quaternion slerp for smooth rotation

### Input
- Separate polling (poll-input.ts) from application (apply-input.ts)
- Reset accumulated values after use: `state.mouseDelta[X/Y] = 0;`
- Handle pointer lock for mouse movement

## Performance
- Reuse vectors/matrices instead of creating new ones
- Use spatial partitioning (SpatialHashMap) for efficient collision detection
- Dispose unused THREE.js resources
- Use BufferGeometry, InstancedMesh and object pooling

## Anti-Patterns
- ❌ Don't access DOM directly (use input system)
- ❌ Don't modify React state from systems
- ❌ Don't create new THREE.js objects each frame
- ❌ Don't skip delta time in movement calculations
- ❌ Don't mix visual and logic updates

## Structure & Organization
- Import Three.js via ES modules
- Follow naming pattern: update-*, apply-*, handle-*
- Document system execution order and dependencies
- Keep each system's responsibility focused
- All player controls in apply-input.ts, poll-input.ts
- Avoid useFrame in components for input handling

## System Patterns
```typescript
// Transform System
export function moveEntities(world: World) {
    const { delta } = world.get(Time)!;
    world.query(Transform, Movement).updateEach(([t, m]) => {
        t.position.x += m.velocity.x * delta;
        t.position.y += m.velocity.y * delta;
        t.position.z += m.velocity.z * delta;
        m.velocity.multiplyScalar(m.damping);
    });
}

// Input System
export function pollInput(world: World) {
    world.query(IsPlayer, Input).updateEach(([input]) => {
        input.mouseDelta.set(state.mouseDeltaX, state.mouseDeltaY);
        state.mouseDeltaX = 0;
        state.mouseDeltaY = 0;
    });
}
```